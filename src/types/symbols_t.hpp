#pragma once
#include <map>
#include <string>

typedef enum {
  TOKEN_PLUS,
  TOKEN_MINUS,
  TOKEN_SLASH_FORWARD,
  TOKEN_SLASH_BACKWARD,
  TOKEN_ASTERISK,
  TOKEN_ASSIGN,
  TOKEN_DELIM,
  TOKEN_PIPE_OPERATOR,

  TOKEN_BOOLEAN_EQUAL,
  TOKEN_BOOLEAN_OR,
  TOKEN_BOOLEAN_AND,
  TOKEN_BOOLEAN_NOT,

  TOKEN_GREATER,
  TOKEN_LESS,
  TOKEN_GREATER_EQUAL,
  TOKEN_LESS_EQUAL,

  TOKEN_PAREN_LEFT,
  TOKEN_PAREN_RIGHT,
  TOKEN_SQUARE_BRAC_LEFT,
  TOKEN_SQUARE_BRAC_RIGHT,
  TOKEN_SQUIG_BRAC_LEFT,
  TOKEN_SQUIG_BRAC_RIGHT,

  TOKEN_SEMI_COLON,
  TOKEN_COLON,
  
  TOKEN_CASE_OPEN,
  TOKEN_CASE_CLOSE,

  TOKEN_QUOTE_SINGLE,
  TOKEN_QUOTE_DOUBLE,

  TOKEN_RETURN_TYPE,
  TOKEN_CONSTANT,

  TOKEN_SYMBOL,
  TOKEN_STRING_LITERAL,
  TOKEN_INTEGER_LITERAL,
  TOKEN_FLOAT_LITERAL,

  KEYWORD_IF,
  KEYWORD_FUNC_BEG,
  KEYWORD_FUNC_END,

  KEYWORD_CASE,
  KEYWORD_DEFAULT,

  KEYWORD_TRUE,
  KEYWORD_FALSE,
  KEYWORD_NIL,

  TOKEN_EOF,
  TOKEN_UNDEF
} TOKEN_TYPE;

static const std::map<std::string, TOKEN_TYPE> TokenLookupTable{
  {"+",  TOKEN_PLUS},
  {"-",  TOKEN_MINUS},
  {"/",  TOKEN_SLASH_FORWARD},
  {"\\", TOKEN_SLASH_BACKWARD},
  {"*",  TOKEN_ASTERISK},
  {"=",  TOKEN_ASSIGN},
  {"#",  TOKEN_CONSTANT},
  {",",  TOKEN_DELIM},
  {"|=", TOKEN_PIPE_OPERATOR},

  {"==", TOKEN_BOOLEAN_EQUAL},
  {"$$", TOKEN_BOOLEAN_OR},
  {"&&", TOKEN_BOOLEAN_AND},
  {"~",  TOKEN_BOOLEAN_NOT},

  {">",  TOKEN_GREATER},
  {"<",  TOKEN_LESS},
  {">=", TOKEN_GREATER_EQUAL},
  {"<=", TOKEN_LESS_EQUAL},

  {"(",  TOKEN_PAREN_LEFT},
  {")",  TOKEN_PAREN_RIGHT},
  {"[",  TOKEN_SQUARE_BRAC_LEFT},
  {"]",  TOKEN_SQUARE_BRAC_RIGHT},
  {"{",  TOKEN_SQUIG_BRAC_LEFT},
  {"}",  TOKEN_SQUIG_BRAC_RIGHT},

  {";",  TOKEN_SEMI_COLON},
  {":",  TOKEN_COLON},

  {"::", TOKEN_CASE_OPEN},
  {"end::", TOKEN_CASE_CLOSE},

  {":>", TOKEN_RETURN_TYPE},

  {"'",  TOKEN_QUOTE_SINGLE},
  {"\"", TOKEN_QUOTE_DOUBLE},

  {"if", KEYWORD_IF},

  {"True",  KEYWORD_TRUE},
  {"False", KEYWORD_FALSE},
  {"Nil",   KEYWORD_NIL},
  {"default", KEYWORD_DEFAULT},

  {"case", KEYWORD_CASE},
  {"func", KEYWORD_FUNC_BEG},
  {"end.", KEYWORD_FUNC_END},
};
